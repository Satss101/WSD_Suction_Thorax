
WSD_Suction_Thorax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f98  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d0  080066d0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  2000001c  080066f4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080066f4  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010721  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002360  00000000  00000000  000307b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8e  00000000  00000000  00033af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ff5  00000000  00000000  0003477e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013101  00000000  00000000  0004b773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091062  00000000  00000000  0005e874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000441c  00000000  00000000  000ef8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f3cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004718 	.word	0x08004718

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08004718 	.word	0x08004718

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t delay){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <delay+0x30>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 80004e6:	bf00      	nop
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <delay+0x30>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f9      	bcc.n	80004e8 <delay+0x14>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000008c 	.word	0x2000008c

08000508 <check_clm>:

unsigned char check_clm(unsigned char pin_var)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	unsigned char clm;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //GPIO_PIN_SET means that pin setting HIGH/1
 8000512:	2201      	movs	r2, #1
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	4828      	ldr	r0, [pc, #160]	; (80005b8 <check_clm+0xb0>)
 8000518:	f001 fed4 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_SET); //GPIO_PIN_SET means that pin setting HIGH/1
 800051c:	2201      	movs	r2, #1
 800051e:	2105      	movs	r1, #5
 8000520:	4826      	ldr	r0, [pc, #152]	; (80005bc <check_clm+0xb4>)
 8000522:	f001 fecf 	bl	80022c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	4824      	ldr	r0, [pc, #144]	; (80005bc <check_clm+0xb4>)
 800052c:	f001 feca 	bl	80022c4 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOB, pin_var) == 0) clm = 1;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	b29b      	uxth	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	4821      	ldr	r0, [pc, #132]	; (80005bc <check_clm+0xb4>)
 8000538:	f001 feac 	bl	8002294 <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d101      	bne.n	8000546 <check_clm+0x3e>
 8000542:	2301      	movs	r3, #1
 8000544:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2101      	movs	r1, #1
 800054a:	481c      	ldr	r0, [pc, #112]	; (80005bc <check_clm+0xb4>)
 800054c:	f001 feba 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2104      	movs	r1, #4
 8000554:	4819      	ldr	r0, [pc, #100]	; (80005bc <check_clm+0xb4>)
 8000556:	f001 feb5 	bl	80022c4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin (GPIOB, pin_var) == 0) clm = 2;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	b29b      	uxth	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	4816      	ldr	r0, [pc, #88]	; (80005bc <check_clm+0xb4>)
 8000562:	f001 fe97 	bl	8002294 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d101      	bne.n	8000570 <check_clm+0x68>
 800056c:	2302      	movs	r3, #2
 800056e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2104      	movs	r1, #4
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <check_clm+0xb4>)
 8000576:	f001 fea5 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	480e      	ldr	r0, [pc, #56]	; (80005b8 <check_clm+0xb0>)
 8000580:	f001 fea0 	bl	80022c4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOA, pin_var) == 0) clm = 3;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	b29b      	uxth	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <check_clm+0xb0>)
 800058c:	f001 fe82 	bl	8002294 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <check_clm+0x92>
 8000596:	2303      	movs	r3, #3
 8000598:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <check_clm+0xb0>)
 80005a0:	f001 fe90 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2105      	movs	r1, #5
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <check_clm+0xb4>)
 80005aa:	f001 fe8b 	bl	80022c4 <HAL_GPIO_WritePin>
	return clm;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40020400 	.word	0x40020400

080005c0 <key_press>:

unsigned char key_press(void) //input row
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
	unsigned char clm_var;
	unsigned char key_arr[13] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 0, 13};
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <key_press+0xb4>)
 80005c8:	463c      	mov	r4, r7
 80005ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005cc:	c407      	stmia	r4!, {r0, r1, r2}
 80005ce:	7023      	strb	r3, [r4, #0]

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 80005d0:	2102      	movs	r1, #2
 80005d2:	4829      	ldr	r0, [pc, #164]	; (8000678 <key_press+0xb8>)
 80005d4:	f001 fe5e 	bl	8002294 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10b      	bne.n	80005f6 <key_press+0x36>
	{
		clm_var = check_clm(GPIO_PIN_1);
 80005de:	2002      	movs	r0, #2
 80005e0:	f7ff ff92 	bl	8000508 <check_clm>
 80005e4:	4603      	mov	r3, r0
 80005e6:	73fb      	strb	r3, [r7, #15]
		return key_arr[clm_var - 1];
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	3310      	adds	r3, #16
 80005ee:	443b      	add	r3, r7
 80005f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005f4:	e039      	b.n	800066a <key_press+0xaa>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80005f6:	2110      	movs	r1, #16
 80005f8:	4820      	ldr	r0, [pc, #128]	; (800067c <key_press+0xbc>)
 80005fa:	f001 fe4b 	bl	8002294 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10b      	bne.n	800061c <key_press+0x5c>
	{
		clm_var = check_clm(GPIO_PIN_4);
 8000604:	2010      	movs	r0, #16
 8000606:	f7ff ff7f 	bl	8000508 <check_clm>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
		return key_arr[clm_var + 2];
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3302      	adds	r3, #2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800061a:	e026      	b.n	800066a <key_press+0xaa>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 800061c:	2120      	movs	r1, #32
 800061e:	4817      	ldr	r0, [pc, #92]	; (800067c <key_press+0xbc>)
 8000620:	f001 fe38 	bl	8002294 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10b      	bne.n	8000642 <key_press+0x82>
	{
		clm_var = check_clm(GPIO_PIN_5);
 800062a:	2020      	movs	r0, #32
 800062c:	f7ff ff6c 	bl	8000508 <check_clm>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
		return key_arr[clm_var + 5];
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3305      	adds	r3, #5
 8000638:	3310      	adds	r3, #16
 800063a:	443b      	add	r3, r7
 800063c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000640:	e013      	b.n	800066a <key_press+0xaa>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0)
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <key_press+0xbc>)
 8000646:	f001 fe25 	bl	8002294 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10b      	bne.n	8000668 <key_press+0xa8>
	{
		clm_var = check_clm(GPIO_PIN_7);
 8000650:	2080      	movs	r0, #128	; 0x80
 8000652:	f7ff ff59 	bl	8000508 <check_clm>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
		return key_arr[clm_var + 8];
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	3308      	adds	r3, #8
 800065e:	3310      	adds	r3, #16
 8000660:	443b      	add	r3, r7
 8000662:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000666:	e000      	b.n	800066a <key_press+0xaa>
	}
	else return 15;
 8000668:	230f      	movs	r3, #15
}
 800066a:	4618      	mov	r0, r3
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	bf00      	nop
 8000674:	08004730 	.word	0x08004730
 8000678:	40020400 	.word	0x40020400
 800067c:	40020000 	.word	0x40020000

08000680 <cekKeypad>:

void cekKeypad(int var1){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f001 f85f 	bl	800174c <HAL_Delay>
	if(var1<15){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0e      	cmp	r3, #14
 8000692:	f300 80f3 	bgt.w	800087c <cekKeypad+0x1fc>
		if(var1 == 1){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10f      	bne.n	80006bc <cekKeypad+0x3c>
			ssd1306_Fill(Black);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fca1 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 80006a2:	2100      	movs	r1, #0
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fddf 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("1", Font_16x24, White);
 80006aa:	4a76      	ldr	r2, [pc, #472]	; (8000884 <cekKeypad+0x204>)
 80006ac:	2301      	movs	r3, #1
 80006ae:	ca06      	ldmia	r2, {r1, r2}
 80006b0:	4875      	ldr	r0, [pc, #468]	; (8000888 <cekKeypad+0x208>)
 80006b2:	f000 fdb3 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80006b6:	f000 fcad 	bl	8001014 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(2,0);
			ssd1306_Fill(Black);
			ssd1306_UpdateScreen();
		}
	}
}
 80006ba:	e0df      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 2){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d10f      	bne.n	80006e2 <cekKeypad+0x62>
			ssd1306_Fill(Black);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fc8e 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 80006c8:	2100      	movs	r1, #0
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 fdcc 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("2", Font_16x24, White);
 80006d0:	4a6c      	ldr	r2, [pc, #432]	; (8000884 <cekKeypad+0x204>)
 80006d2:	2301      	movs	r3, #1
 80006d4:	ca06      	ldmia	r2, {r1, r2}
 80006d6:	486d      	ldr	r0, [pc, #436]	; (800088c <cekKeypad+0x20c>)
 80006d8:	f000 fda0 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80006dc:	f000 fc9a 	bl	8001014 <ssd1306_UpdateScreen>
}
 80006e0:	e0cc      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 3){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d10f      	bne.n	8000708 <cekKeypad+0x88>
			ssd1306_Fill(Black);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fc7b 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fdb9 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("3", Font_16x24, White);
 80006f6:	4a63      	ldr	r2, [pc, #396]	; (8000884 <cekKeypad+0x204>)
 80006f8:	2301      	movs	r3, #1
 80006fa:	ca06      	ldmia	r2, {r1, r2}
 80006fc:	4864      	ldr	r0, [pc, #400]	; (8000890 <cekKeypad+0x210>)
 80006fe:	f000 fd8d 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000702:	f000 fc87 	bl	8001014 <ssd1306_UpdateScreen>
}
 8000706:	e0b9      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 4){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b04      	cmp	r3, #4
 800070c:	d10f      	bne.n	800072e <cekKeypad+0xae>
			ssd1306_Fill(Black);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fc68 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 8000714:	2100      	movs	r1, #0
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fda6 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("4", Font_16x24, White);
 800071c:	4a59      	ldr	r2, [pc, #356]	; (8000884 <cekKeypad+0x204>)
 800071e:	2301      	movs	r3, #1
 8000720:	ca06      	ldmia	r2, {r1, r2}
 8000722:	485c      	ldr	r0, [pc, #368]	; (8000894 <cekKeypad+0x214>)
 8000724:	f000 fd7a 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000728:	f000 fc74 	bl	8001014 <ssd1306_UpdateScreen>
}
 800072c:	e0a6      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 5){
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b05      	cmp	r3, #5
 8000732:	d10f      	bne.n	8000754 <cekKeypad+0xd4>
			ssd1306_Fill(Black);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fc55 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 800073a:	2100      	movs	r1, #0
 800073c:	2002      	movs	r0, #2
 800073e:	f000 fd93 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("5", Font_16x24, White);
 8000742:	4a50      	ldr	r2, [pc, #320]	; (8000884 <cekKeypad+0x204>)
 8000744:	2301      	movs	r3, #1
 8000746:	ca06      	ldmia	r2, {r1, r2}
 8000748:	4853      	ldr	r0, [pc, #332]	; (8000898 <cekKeypad+0x218>)
 800074a:	f000 fd67 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800074e:	f000 fc61 	bl	8001014 <ssd1306_UpdateScreen>
}
 8000752:	e093      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 6){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b06      	cmp	r3, #6
 8000758:	d10f      	bne.n	800077a <cekKeypad+0xfa>
			ssd1306_Fill(Black);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fc42 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 8000760:	2100      	movs	r1, #0
 8000762:	2002      	movs	r0, #2
 8000764:	f000 fd80 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("6", Font_16x24, White);
 8000768:	4a46      	ldr	r2, [pc, #280]	; (8000884 <cekKeypad+0x204>)
 800076a:	2301      	movs	r3, #1
 800076c:	ca06      	ldmia	r2, {r1, r2}
 800076e:	484b      	ldr	r0, [pc, #300]	; (800089c <cekKeypad+0x21c>)
 8000770:	f000 fd54 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000774:	f000 fc4e 	bl	8001014 <ssd1306_UpdateScreen>
}
 8000778:	e080      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 7){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b07      	cmp	r3, #7
 800077e:	d10f      	bne.n	80007a0 <cekKeypad+0x120>
			ssd1306_Fill(Black);
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fc2f 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 8000786:	2100      	movs	r1, #0
 8000788:	2002      	movs	r0, #2
 800078a:	f000 fd6d 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("7", Font_16x24, White);
 800078e:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <cekKeypad+0x204>)
 8000790:	2301      	movs	r3, #1
 8000792:	ca06      	ldmia	r2, {r1, r2}
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <cekKeypad+0x220>)
 8000796:	f000 fd41 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800079a:	f000 fc3b 	bl	8001014 <ssd1306_UpdateScreen>
}
 800079e:	e06d      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 8){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b08      	cmp	r3, #8
 80007a4:	d10f      	bne.n	80007c6 <cekKeypad+0x146>
			ssd1306_Fill(Black);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 fc1c 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 fd5a 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("8", Font_16x24, White);
 80007b4:	4a33      	ldr	r2, [pc, #204]	; (8000884 <cekKeypad+0x204>)
 80007b6:	2301      	movs	r3, #1
 80007b8:	ca06      	ldmia	r2, {r1, r2}
 80007ba:	483a      	ldr	r0, [pc, #232]	; (80008a4 <cekKeypad+0x224>)
 80007bc:	f000 fd2e 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80007c0:	f000 fc28 	bl	8001014 <ssd1306_UpdateScreen>
}
 80007c4:	e05a      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 9){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b09      	cmp	r3, #9
 80007ca:	d10f      	bne.n	80007ec <cekKeypad+0x16c>
			ssd1306_Fill(Black);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 fc09 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2002      	movs	r0, #2
 80007d6:	f000 fd47 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("9", Font_16x24, White);
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <cekKeypad+0x204>)
 80007dc:	2301      	movs	r3, #1
 80007de:	ca06      	ldmia	r2, {r1, r2}
 80007e0:	4831      	ldr	r0, [pc, #196]	; (80008a8 <cekKeypad+0x228>)
 80007e2:	f000 fd1b 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80007e6:	f000 fc15 	bl	8001014 <ssd1306_UpdateScreen>
}
 80007ea:	e047      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 12){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b0c      	cmp	r3, #12
 80007f0:	d10f      	bne.n	8000812 <cekKeypad+0x192>
			ssd1306_Fill(Black);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 fbf6 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	2002      	movs	r0, #2
 80007fc:	f000 fd34 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_16x24, White);
 8000800:	4a20      	ldr	r2, [pc, #128]	; (8000884 <cekKeypad+0x204>)
 8000802:	2301      	movs	r3, #1
 8000804:	ca06      	ldmia	r2, {r1, r2}
 8000806:	4829      	ldr	r0, [pc, #164]	; (80008ac <cekKeypad+0x22c>)
 8000808:	f000 fd08 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800080c:	f000 fc02 	bl	8001014 <ssd1306_UpdateScreen>
}
 8000810:	e034      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 0){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10f      	bne.n	8000838 <cekKeypad+0x1b8>
			ssd1306_Fill(Black);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fbe3 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2002      	movs	r0, #2
 8000822:	f000 fd21 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("0", Font_16x24, White);
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <cekKeypad+0x204>)
 8000828:	2301      	movs	r3, #1
 800082a:	ca06      	ldmia	r2, {r1, r2}
 800082c:	4820      	ldr	r0, [pc, #128]	; (80008b0 <cekKeypad+0x230>)
 800082e:	f000 fcf5 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000832:	f000 fbef 	bl	8001014 <ssd1306_UpdateScreen>
}
 8000836:	e021      	b.n	800087c <cekKeypad+0x1fc>
		else if(var1 == 13){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b0d      	cmp	r3, #13
 800083c:	d10f      	bne.n	800085e <cekKeypad+0x1de>
			ssd1306_Fill(Black);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fbd0 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_SetCursor(2,0);
 8000844:	2100      	movs	r1, #0
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fd0e 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_WriteString("#", Font_16x24, White);
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <cekKeypad+0x204>)
 800084e:	2301      	movs	r3, #1
 8000850:	ca06      	ldmia	r2, {r1, r2}
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <cekKeypad+0x234>)
 8000854:	f000 fce2 	bl	800121c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000858:	f000 fbdc 	bl	8001014 <ssd1306_UpdateScreen>
}
 800085c:	e00e      	b.n	800087c <cekKeypad+0x1fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <cekKeypad+0x238>)
 8000866:	f001 fd2d 	bl	80022c4 <HAL_GPIO_WritePin>
			ssd1306_SetCursor(2,0);
 800086a:	2100      	movs	r1, #0
 800086c:	2002      	movs	r0, #2
 800086e:	f000 fcfb 	bl	8001268 <ssd1306_SetCursor>
			ssd1306_Fill(Black);
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fbb6 	bl	8000fe4 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8000878:	f000 fbcc 	bl	8001014 <ssd1306_UpdateScreen>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000008 	.word	0x20000008
 8000888:	08004740 	.word	0x08004740
 800088c:	08004744 	.word	0x08004744
 8000890:	08004748 	.word	0x08004748
 8000894:	0800474c 	.word	0x0800474c
 8000898:	08004750 	.word	0x08004750
 800089c:	08004754 	.word	0x08004754
 80008a0:	08004758 	.word	0x08004758
 80008a4:	0800475c 	.word	0x0800475c
 80008a8:	08004760 	.word	0x08004760
 80008ac:	08004764 	.word	0x08004764
 80008b0:	08004768 	.word	0x08004768
 80008b4:	0800476c 	.word	0x0800476c
 80008b8:	40020800 	.word	0x40020800

080008bc <gerakStepper>:

float mape(float val, float min1, float max1, float min2, float max2){
	return (((max2 - min2) / (max1 - min1)) * (val - min1)) + min2;
}

void gerakStepper(int arah, uint32_t step, uint32_t jeda){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
//	uint8_t val = mape(nilai, 0, 20, 0, 30000);
//	uint8_t gerak = 0;
//	if(arah == 'l') gerak = 0;
//	else if(arah == 'r') gerak = 1;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, arah); //0 == left
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <gerakStepper+0x68>)
 80008d4:	f001 fcf6 	bl	80022c4 <HAL_GPIO_WritePin>
	for(int i = 0; i < step; i++){
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e018      	b.n	8000910 <gerakStepper+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <gerakStepper+0x68>)
 80008e6:	f001 fced 	bl	80022c4 <HAL_GPIO_WritePin>
		delay(jeda);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fdf0 	bl	80004d4 <delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <gerakStepper+0x68>)
 80008fc:	f001 fce2 	bl	80022c4 <HAL_GPIO_WritePin>
		delay(jeda);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fde5 	bl	80004d4 <delay>
	for(int i = 0; i < step; i++){
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8e2      	bhi.n	80008de <gerakStepper+0x22>
	}
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020400 	.word	0x40020400

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fe9c 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f87e 	bl	8000a30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //its for input pin
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2102      	movs	r1, #2
 8000938:	4834      	ldr	r0, [pc, #208]	; (8000a0c <main+0xe4>)
 800093a:	f001 fcc3 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	21b0      	movs	r1, #176	; 0xb0
 8000942:	4833      	ldr	r0, [pc, #204]	; (8000a10 <main+0xe8>)
 8000944:	f001 fcbe 	bl	80022c4 <HAL_GPIO_WritePin>
  //its for output pin
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_0, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2105      	movs	r1, #5
 800094c:	482f      	ldr	r0, [pc, #188]	; (8000a0c <main+0xe4>)
 800094e:	f001 fcb9 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	482e      	ldr	r0, [pc, #184]	; (8000a10 <main+0xe8>)
 8000958:	f001 fcb4 	bl	80022c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000962:	482c      	ldr	r0, [pc, #176]	; (8000a14 <main+0xec>)
 8000964:	f001 fcae 	bl	80022c4 <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 f9e2 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 800096c:	f000 f9c0 	bl	8000cf0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000970:	f000 f8c6 	bl	8000b00 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000974:	f000 f992 	bl	8000c9c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000978:	f000 f8f0 	bl	8000b5c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //  int i = 0;
//  char data[15];
  ssd1306_Init();
 800097c:	f000 fac8 	bl	8000f10 <ssd1306_Init>
  TIM1->CCR1=0;
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <main+0xf0>)
 8000982:	2200      	movs	r2, #0
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000986:	2100      	movs	r1, #0
 8000988:	4824      	ldr	r0, [pc, #144]	; (8000a1c <main+0xf4>)
 800098a:	f002 fe11 	bl	80035b0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_SetCursor(2,0);
 800098e:	2100      	movs	r1, #0
 8000990:	2002      	movs	r0, #2
 8000992:	f000 fc69 	bl	8001268 <ssd1306_SetCursor>
  ssd1306_WriteString("WSD", Font_11x18, White);
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <main+0xf8>)
 8000998:	2301      	movs	r3, #1
 800099a:	ca06      	ldmia	r2, {r1, r2}
 800099c:	4821      	ldr	r0, [pc, #132]	; (8000a24 <main+0xfc>)
 800099e:	f000 fc3d 	bl	800121c <ssd1306_WriteString>
  ssd1306_SetCursor(2,25);
 80009a2:	2119      	movs	r1, #25
 80009a4:	2002      	movs	r0, #2
 80009a6:	f000 fc5f 	bl	8001268 <ssd1306_SetCursor>
  ssd1306_WriteString("THORAX", Font_11x18, White);
 80009aa:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <main+0xf8>)
 80009ac:	2301      	movs	r3, #1
 80009ae:	ca06      	ldmia	r2, {r1, r2}
 80009b0:	481d      	ldr	r0, [pc, #116]	; (8000a28 <main+0x100>)
 80009b2:	f000 fc33 	bl	800121c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80009b6:	f000 fb2d 	bl	8001014 <ssd1306_UpdateScreen>
//	  HAL_ADC_PollForConversion(&hadc1,1000);
//	  readValue = HAL_ADC_GetValue(&hadc1);
//	  sprintf(data," NILAI: %d\r\n",var);
//	  HAL_UART_Transmit(&huart1, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
	  ////////////////////////////////////////////////////////////////////////////////////
	  var = key_press();
 80009ba:	f7ff fe01 	bl	80005c0 <key_press>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <main+0x104>)
 80009c4:	701a      	strb	r2, [r3, #0]
	  cekKeypad(var);////////////////////////////////////
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <main+0x104>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe58 	bl	8000680 <cekKeypad>
	  if(var == 13){
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <main+0x104>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b0d      	cmp	r3, #13
 80009d6:	d106      	bne.n	80009e6 <main+0xbe>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <main+0xe4>)
 80009e0:	f001 fc70 	bl	80022c4 <HAL_GPIO_WritePin>
 80009e4:	e7e9      	b.n	80009ba <main+0x92>
	  }
	  else if(var == 9){
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <main+0x104>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b09      	cmp	r3, #9
 80009ec:	d107      	bne.n	80009fe <main+0xd6>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
		  gerakStepper(0,10000,5500); //5000 == 50 uS
 80009ee:	f241 527c 	movw	r2, #5500	; 0x157c
 80009f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff ff60 	bl	80008bc <gerakStepper>
 80009fc:	e7dd      	b.n	80009ba <main+0x92>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a04:	4801      	ldr	r0, [pc, #4]	; (8000a0c <main+0xe4>)
 8000a06:	f001 fc5d 	bl	80022c4 <HAL_GPIO_WritePin>
	  var = key_press();
 8000a0a:	e7d6      	b.n	80009ba <main+0x92>
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	20000000 	.word	0x20000000
 8000a24:	08004770 	.word	0x08004770
 8000a28:	08004774 	.word	0x08004774
 8000a2c:	20000178 	.word	0x20000178

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	; 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	; 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fe3e 	bl	80046c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <SystemClock_Config+0xc8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <SystemClock_Config+0xc8>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <SystemClock_Config+0xc8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <SystemClock_Config+0xcc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <SystemClock_Config+0xcc>)
 8000a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aa4:	2360      	movs	r3, #96	; 0x60
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 f87b 	bl	8002bb0 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac0:	f000 f9e8 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2103      	movs	r1, #3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fadd 	bl	80030a0 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aec:	f000 f9d2 	bl	8000e94 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3750      	adds	r7, #80	; 0x50
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_I2C1_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_I2C1_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b3e:	f001 fbdb 	bl	80022f8 <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 f9a4 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000038 	.word	0x20000038
 8000b54:	40005400 	.word	0x40005400
 8000b58:	00061a80 	.word	0x00061a80

08000b5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b096      	sub	sp, #88	; 0x58
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2220      	movs	r2, #32
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fd93 	bl	80046c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000b9c:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <MX_TIM1_Init+0x13c>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000ba0:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000bae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bc6:	4833      	ldr	r0, [pc, #204]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000bc8:	f002 fc4a 	bl	8003460 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bd2:	f000 f95f 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000be0:	4619      	mov	r1, r3
 8000be2:	482c      	ldr	r0, [pc, #176]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000be4:	f002 fe56 	bl	8003894 <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bee:	f000 f951 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf2:	4828      	ldr	r0, [pc, #160]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000bf4:	f002 fc83 	bl	80034fe <HAL_TIM_PWM_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bfe:	f000 f949 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4820      	ldr	r0, [pc, #128]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000c12:	f003 f9d3 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c1c:	f000 f93a 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c20:	2360      	movs	r3, #96	; 0x60
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	2200      	movs	r2, #0
 8000c42:	4619      	mov	r1, r3
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000c46:	f002 fd63 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c50:	f000 f920 	bl	8000e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000c78:	f003 fa0e 	bl	8004098 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c82:	f000 f907 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM1_Init+0x138>)
 8000c88:	f000 fbfc 	bl	8001484 <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3758      	adds	r7, #88	; 0x58
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	40010000 	.word	0x40010000

08000c9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART1_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	f003 fa32 	bl	800413c <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 f8d9 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000134 	.word	0x20000134
 8000cec:	40011000 	.word	0x40011000

08000cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2039      	movs	r0, #57	; 0x39
 8000d18:	f000 fe17 	bl	800194a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d1c:	2039      	movs	r0, #57	; 0x39
 8000d1e:	f000 fe30 	bl	8001982 <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a4d      	ldr	r2, [pc, #308]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a38      	ldr	r2, [pc, #224]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbc:	4832      	ldr	r0, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x158>)
 8000dbe:	f001 fa81 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	4831      	ldr	r0, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x15c>)
 8000dc8:	f001 fa7c 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|dir_Pin|step_Pin
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000dd2:	482f      	ldr	r0, [pc, #188]	; (8000e90 <MX_GPIO_Init+0x160>)
 8000dd4:	f001 fa76 	bl	80022c4 <HAL_GPIO_WritePin>
                          |en_Pin|relay_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4825      	ldr	r0, [pc, #148]	; (8000e88 <MX_GPIO_Init+0x158>)
 8000df2:	f001 f8cb 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000df6:	23b0      	movs	r3, #176	; 0xb0
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4820      	ldr	r0, [pc, #128]	; (8000e8c <MX_GPIO_Init+0x15c>)
 8000e0a:	f001 f8bf 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e0e:	2340      	movs	r3, #64	; 0x40
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4819      	ldr	r0, [pc, #100]	; (8000e8c <MX_GPIO_Init+0x15c>)
 8000e26:	f001 f8b1 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_GPIO_Init+0x160>)
 8000e42:	f001 f8a3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_GPIO_Init+0x160>)
 8000e5a:	f001 f897 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin step_Pin en_Pin relay_Pin */
  GPIO_InitStruct.Pin = dir_Pin|step_Pin|en_Pin|relay_Pin;
 8000e5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_GPIO_Init+0x160>)
 8000e78:	f001 f888 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>

08000e9e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2178      	movs	r1, #120	; 0x78
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <ssd1306_WriteCommand+0x2c>)
 8000ecc:	f001 fb58 	bl	8002580 <HAL_I2C_Mem_Write>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000038 	.word	0x20000038

08000edc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af04      	add	r7, sp, #16
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f04f 32ff 	mov.w	r2, #4294967295
 8000eee:	9202      	str	r2, [sp, #8]
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	2178      	movs	r1, #120	; 0x78
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <ssd1306_WriteData+0x30>)
 8000efe:	f001 fb3f 	bl	8002580 <HAL_I2C_Mem_Write>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000038 	.word	0x20000038

08000f10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f14:	f7ff ffc3 	bl	8000e9e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	; 0x64
 8000f1a:	f000 fc17 	bl	800174c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f9ce 	bl	80012c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f24:	2020      	movs	r0, #32
 8000f26:	f7ff ffc1 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ffbe 	bl	8000eac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f30:	20b0      	movs	r0, #176	; 0xb0
 8000f32:	f7ff ffbb 	bl	8000eac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f36:	20c8      	movs	r0, #200	; 0xc8
 8000f38:	f7ff ffb8 	bl	8000eac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff ffb5 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f42:	2010      	movs	r0, #16
 8000f44:	f7ff ffb2 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f48:	2040      	movs	r0, #64	; 0x40
 8000f4a:	f7ff ffaf 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f4e:	20ff      	movs	r0, #255	; 0xff
 8000f50:	f000 f9a2 	bl	8001298 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f54:	20a1      	movs	r0, #161	; 0xa1
 8000f56:	f7ff ffa9 	bl	8000eac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f5a:	20a6      	movs	r0, #166	; 0xa6
 8000f5c:	f7ff ffa6 	bl	8000eac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f60:	20a8      	movs	r0, #168	; 0xa8
 8000f62:	f7ff ffa3 	bl	8000eac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f66:	203f      	movs	r0, #63	; 0x3f
 8000f68:	f7ff ffa0 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f6c:	20a4      	movs	r0, #164	; 0xa4
 8000f6e:	f7ff ff9d 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f72:	20d3      	movs	r0, #211	; 0xd3
 8000f74:	f7ff ff9a 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff ff97 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f7e:	20d5      	movs	r0, #213	; 0xd5
 8000f80:	f7ff ff94 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f84:	20f0      	movs	r0, #240	; 0xf0
 8000f86:	f7ff ff91 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f8a:	20d9      	movs	r0, #217	; 0xd9
 8000f8c:	f7ff ff8e 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f90:	2022      	movs	r0, #34	; 0x22
 8000f92:	f7ff ff8b 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f96:	20da      	movs	r0, #218	; 0xda
 8000f98:	f7ff ff88 	bl	8000eac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f9c:	2012      	movs	r0, #18
 8000f9e:	f7ff ff85 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fa2:	20db      	movs	r0, #219	; 0xdb
 8000fa4:	f7ff ff82 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fa8:	2020      	movs	r0, #32
 8000faa:	f7ff ff7f 	bl	8000eac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fae:	208d      	movs	r0, #141	; 0x8d
 8000fb0:	f7ff ff7c 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f7ff ff79 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 f980 	bl	80012c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f80f 	bl	8000fe4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000fc6:	f000 f825 	bl	8001014 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <ssd1306_Init+0xd0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <ssd1306_Init+0xd0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000fd6:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <ssd1306_Init+0xd0>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	711a      	strb	r2, [r3, #4]
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000057c 	.word	0x2000057c

08000fe4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <ssd1306_Fill+0x14>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e000      	b.n	8000ffa <ssd1306_Fill+0x16>
 8000ff8:	23ff      	movs	r3, #255	; 0xff
 8000ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffe:	4619      	mov	r1, r3
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <ssd1306_Fill+0x2c>)
 8001002:	f003 fb5d 	bl	80046c0 <memset>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000017c 	.word	0x2000017c

08001014 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	e016      	b.n	800104e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	3b50      	subs	r3, #80	; 0x50
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff40 	bl	8000eac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ff3d 	bl	8000eac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001032:	2010      	movs	r0, #16
 8001034:	f7ff ff3a 	bl	8000eac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	01db      	lsls	r3, r3, #7
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <ssd1306_UpdateScreen+0x4c>)
 800103e:	4413      	add	r3, r2
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff4a 	bl	8000edc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	3301      	adds	r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d9e5      	bls.n	8001020 <ssd1306_UpdateScreen+0xc>
    }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000017c 	.word	0x2000017c

08001064 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	460b      	mov	r3, r1
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	4613      	mov	r3, r2
 8001074:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db3d      	blt.n	80010fa <ssd1306_DrawPixel+0x96>
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	2b3f      	cmp	r3, #63	; 0x3f
 8001082:	d83a      	bhi.n	80010fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d11a      	bne.n	80010c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	4603      	mov	r3, r0
 8001094:	01db      	lsls	r3, r3, #7
 8001096:	4413      	add	r3, r2
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <ssd1306_DrawPixel+0xa4>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	b25a      	sxtb	r2, r3
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b259      	sxtb	r1, r3
 80010b0:	79fa      	ldrb	r2, [r7, #7]
 80010b2:	4603      	mov	r3, r0
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	4413      	add	r3, r2
 80010b8:	b2c9      	uxtb	r1, r1
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <ssd1306_DrawPixel+0xa4>)
 80010bc:	54d1      	strb	r1, [r2, r3]
 80010be:	e01d      	b.n	80010fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	b2d8      	uxtb	r0, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	01db      	lsls	r3, r3, #7
 80010cc:	4413      	add	r3, r2
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <ssd1306_DrawPixel+0xa4>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4013      	ands	r3, r2
 80010e8:	b259      	sxtb	r1, r3
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	4603      	mov	r3, r0
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	4413      	add	r3, r2
 80010f2:	b2c9      	uxtb	r1, r1
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <ssd1306_DrawPixel+0xa4>)
 80010f6:	54d1      	strb	r1, [r2, r3]
 80010f8:	e000      	b.n	80010fc <ssd1306_DrawPixel+0x98>
        return;
 80010fa:	bf00      	nop
    }
}
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000017c 	.word	0x2000017c

0800110c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	1d38      	adds	r0, r7, #4
 8001116:	e880 0006 	stmia.w	r0, {r1, r2}
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	4613      	mov	r3, r2
 8001122:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b1f      	cmp	r3, #31
 8001128:	d902      	bls.n	8001130 <ssd1306_WriteChar+0x24>
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b7e      	cmp	r3, #126	; 0x7e
 800112e:	d901      	bls.n	8001134 <ssd1306_WriteChar+0x28>
        return 0;
 8001130:	2300      	movs	r3, #0
 8001132:	e06d      	b.n	8001210 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <ssd1306_WriteChar+0x10c>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	793b      	ldrb	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	2b80      	cmp	r3, #128	; 0x80
 8001140:	dc06      	bgt.n	8001150 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001142:	4b35      	ldr	r3, [pc, #212]	; (8001218 <ssd1306_WriteChar+0x10c>)
 8001144:	885b      	ldrh	r3, [r3, #2]
 8001146:	461a      	mov	r2, r3
 8001148:	797b      	ldrb	r3, [r7, #5]
 800114a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800114c:	2b40      	cmp	r3, #64	; 0x40
 800114e:	dd01      	ble.n	8001154 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e05d      	b.n	8001210 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	e04c      	b.n	80011f4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3b20      	subs	r3, #32
 8001160:	7979      	ldrb	r1, [r7, #5]
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	4619      	mov	r1, r3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	440b      	add	r3, r1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	e034      	b.n	80011e4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d012      	beq.n	80011b0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <ssd1306_WriteChar+0x10c>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b2d8      	uxtb	r0, r3
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <ssd1306_WriteChar+0x10c>)
 800119a:	885b      	ldrh	r3, [r3, #2]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	7bba      	ldrb	r2, [r7, #14]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff ff5b 	bl	8001064 <ssd1306_DrawPixel>
 80011ae:	e016      	b.n	80011de <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <ssd1306_WriteChar+0x10c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <ssd1306_WriteChar+0x10c>)
 80011c0:	885b      	ldrh	r3, [r3, #2]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b2d9      	uxtb	r1, r3
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf0c      	ite	eq
 80011d2:	2301      	moveq	r3, #1
 80011d4:	2300      	movne	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	f7ff ff43 	bl	8001064 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	793b      	ldrb	r3, [r7, #4]
 80011e6:	461a      	mov	r2, r3
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d3c5      	bcc.n	800117a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	797b      	ldrb	r3, [r7, #5]
 80011f6:	461a      	mov	r2, r3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d3ad      	bcc.n	800115a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <ssd1306_WriteChar+0x10c>)
 8001200:	881a      	ldrh	r2, [r3, #0]
 8001202:	793b      	ldrb	r3, [r7, #4]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b03      	ldr	r3, [pc, #12]	; (8001218 <ssd1306_WriteChar+0x10c>)
 800120c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3724      	adds	r7, #36	; 0x24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	2000057c 	.word	0x2000057c

0800121c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	1d38      	adds	r0, r7, #4
 8001226:	e880 0006 	stmia.w	r0, {r1, r2}
 800122a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800122c:	e012      	b.n	8001254 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	7818      	ldrb	r0, [r3, #0]
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	1d3a      	adds	r2, r7, #4
 8001236:	ca06      	ldmia	r2, {r1, r2}
 8001238:	f7ff ff68 	bl	800110c <ssd1306_WriteChar>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d002      	beq.n	800124e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	e008      	b.n	8001260 <ssd1306_WriteString+0x44>
        }
        str++;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e8      	bne.n	800122e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	781b      	ldrb	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <ssd1306_SetCursor+0x2c>)
 800127e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <ssd1306_SetCursor+0x2c>)
 8001286:	805a      	strh	r2, [r3, #2]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	2000057c 	.word	0x2000057c

08001298 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80012a2:	2381      	movs	r3, #129	; 0x81
 80012a4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdff 	bl	8000eac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fdfb 	bl	8000eac <ssd1306_WriteCommand>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80012d0:	23af      	movs	r3, #175	; 0xaf
 80012d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <ssd1306_SetDisplayOn+0x38>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	715a      	strb	r2, [r3, #5]
 80012da:	e004      	b.n	80012e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80012dc:	23ae      	movs	r3, #174	; 0xae
 80012de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <ssd1306_SetDisplayOn+0x38>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fddf 	bl	8000eac <ssd1306_WriteCommand>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000057c 	.word	0x2000057c

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_I2C_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800138a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <HAL_I2C_MspInit+0x8c>)
 80013a8:	f000 fdf0 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <HAL_TIM_Base_MspInit+0x98>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d13d      	bne.n	800146a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_TIM_Base_MspInit+0x9c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a20      	ldr	r2, [pc, #128]	; (8001478 <HAL_TIM_Base_MspInit+0x9c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_TIM_Base_MspInit+0x9c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 800140c:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <HAL_TIM_Base_MspInit+0xa4>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001412:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001416:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 800141a:	2240      	movs	r2, #64	; 0x40
 800141c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 800142e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001432:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001450:	f000 fab2 	bl	80019b8 <HAL_DMA_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800145a:	f7ff fd1b 	bl	8000e94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_TIM_Base_MspInit+0xa0>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40010000 	.word	0x40010000
 8001478:	40023800 	.word	0x40023800
 800147c:	200000d4 	.word	0x200000d4
 8001480:	40026428 	.word	0x40026428

08001484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <HAL_TIM_MspPostInit+0x68>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d11e      	bne.n	80014e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_TIM_MspPostInit+0x6c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_TIM_MspPostInit+0x6c>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_TIM_MspPostInit+0x6c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <HAL_TIM_MspPostInit+0x70>)
 80014e0:	f000 fd54 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_UART_MspInit+0x84>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12c      	bne.n	8001574 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x88>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_UART_MspInit+0x88>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x88>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_UART_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <HAL_UART_MspInit+0x88>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_UART_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001552:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001564:	2307      	movs	r3, #7
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0x8c>)
 8001570:	f000 fd0c 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40011000 	.word	0x40011000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f89a 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA2_Stream1_IRQHandler+0x10>)
 80015e2:	f000 fa97 	bl	8001b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000d4 	.word	0x200000d4

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f003 f845 	bl	80046d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff f96f 	bl	8000928 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001658:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 800165c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001660:	20000588 	.word	0x20000588

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f94f 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fe2e 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f967 	bl	800199e <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f92f 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010
 8001704:	20000018 	.word	0x20000018
 8001708:	20000014 	.word	0x20000014

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000018 	.word	0x20000018
 8001730:	20000584 	.word	0x20000584

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000584 	.word	0x20000584

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000018 	.word	0x20000018

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff feb6 	bl	8001734 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e099      	b.n	8001b08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f4:	e00f      	b.n	8001a16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f6:	f7ff fe9d 	bl	8001734 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d908      	bls.n	8001a16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e078      	b.n	8001b08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e8      	bne.n	80019f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_DMA_Init+0x158>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d117      	bne.n	8001ada <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00e      	beq.n	8001ada <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f9e9 	bl	8001e94 <DMA_CheckFifoParam>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e016      	b.n	8001b08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f9a0 	bl	8001e28 <DMA_CalcBaseAndBitshift>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	223f      	movs	r2, #63	; 0x3f
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	f010803f 	.word	0xf010803f

08001b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b20:	4b8e      	ldr	r3, [pc, #568]	; (8001d5c <HAL_DMA_IRQHandler+0x248>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a8e      	ldr	r2, [pc, #568]	; (8001d60 <HAL_DMA_IRQHandler+0x24c>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	2208      	movs	r2, #8
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01a      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0204 	bic.w	r2, r2, #4
 8001b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	2201      	movs	r2, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d012      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f043 0202 	orr.w	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2204      	movs	r2, #4
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d012      	beq.n	8001bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2204      	movs	r2, #4
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d043      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03c      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2210      	movs	r2, #16
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d018      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d024      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
 8001c42:	e01f      	b.n	8001c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01b      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
 8001c54:	e016      	b.n	8001c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0208 	bic.w	r2, r2, #8
 8001c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2220      	movs	r2, #32
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 808f 	beq.w	8001db4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8087 	beq.w	8001db4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2220      	movs	r2, #32
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d136      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0216 	bic.w	r2, r2, #22
 8001ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <HAL_DMA_IRQHandler+0x1da>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0208 	bic.w	r2, r2, #8
 8001cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	223f      	movs	r2, #63	; 0x3f
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d07e      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
        }
        return;
 8001d2a:	e079      	b.n	8001e20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01d      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d031      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e02c      	b.n	8001db4 <HAL_DMA_IRQHandler+0x2a0>
 8001d5a:	bf00      	nop
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
 8001d74:	e01e      	b.n	8001db4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10f      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0210 	bic.w	r2, r2, #16
 8001d92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d032      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d022      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2205      	movs	r2, #5
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d307      	bcc.n	8001dfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f2      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x2cc>
 8001dfa:	e000      	b.n	8001dfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
 8001e1e:	e000      	b.n	8001e22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e20:	bf00      	nop
    }
  }
}
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3b10      	subs	r3, #16
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <DMA_CalcBaseAndBitshift+0x64>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d909      	bls.n	8001e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	1d1a      	adds	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
 8001e68:	e007      	b.n	8001e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	aaaaaaab 	.word	0xaaaaaaab
 8001e90:	080066c0 	.word	0x080066c0

08001e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d856      	bhi.n	8001f62 <DMA_CheckFifoParam+0xce>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <DMA_CheckFifoParam+0x28>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001edf 	.word	0x08001edf
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001f63 	.word	0x08001f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d046      	beq.n	8001f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e043      	b.n	8001f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee6:	d140      	bne.n	8001f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e03d      	b.n	8001f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d121      	bne.n	8001f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d837      	bhi.n	8001f6e <DMA_CheckFifoParam+0xda>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <DMA_CheckFifoParam+0x70>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1b 	.word	0x08001f1b
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001f2d 	.word	0x08001f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e030      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d025      	beq.n	8001f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2a:	e022      	b.n	8001f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f34:	d11f      	bne.n	8001f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f3a:	e01c      	b.n	8001f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d903      	bls.n	8001f4a <DMA_CheckFifoParam+0xb6>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d003      	beq.n	8001f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f48:	e018      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4e:	e015      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e00b      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f62:	bf00      	nop
 8001f64:	e00a      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f66:	bf00      	nop
 8001f68:	e008      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e006      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e004      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e002      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e159      	b.n	800225c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8148 	bne.w	8002256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a2 	beq.w	8002256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x202>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2f4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x1fe>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_GPIO_Init+0x2f8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x1fa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a46      	ldr	r2, [pc, #280]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a45      	ldr	r2, [pc, #276]	; (800228c <HAL_GPIO_Init+0x300>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x1f2>
 800217a:	2304      	movs	r3, #4
 800217c:	e008      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800217e:	2307      	movs	r3, #7
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002182:	2303      	movs	r3, #3
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218e:	2300      	movs	r3, #0
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f002 0203 	and.w	r2, r2, #3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4093      	lsls	r3, r2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a0:	4935      	ldr	r1, [pc, #212]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_GPIO_Init+0x304>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	f67f aea2 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40021000 	.word	0x40021000
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e001      	b.n	80022b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e12b      	b.n	8002562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff f814 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800235c:	f001 f858 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a81      	ldr	r2, [pc, #516]	; (800256c <HAL_I2C_Init+0x274>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d807      	bhi.n	800237c <HAL_I2C_Init+0x84>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_I2C_Init+0x278>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e006      	b.n	800238a <HAL_I2C_Init+0x92>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a7d      	ldr	r2, [pc, #500]	; (8002574 <HAL_I2C_Init+0x27c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0e7      	b.n	8002562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a78      	ldr	r2, [pc, #480]	; (8002578 <HAL_I2C_Init+0x280>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0c9b      	lsrs	r3, r3, #18
 800239c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_I2C_Init+0x274>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d802      	bhi.n	80023cc <HAL_I2C_Init+0xd4>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	e009      	b.n	80023e0 <HAL_I2C_Init+0xe8>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_I2C_Init+0x284>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	3301      	adds	r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	495c      	ldr	r1, [pc, #368]	; (800256c <HAL_I2C_Init+0x274>)
 80023fc:	428b      	cmp	r3, r1
 80023fe:	d819      	bhi.n	8002434 <HAL_I2C_Init+0x13c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e59      	subs	r1, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fbb1 f3f3 	udiv	r3, r1, r3
 800240e:	1c59      	adds	r1, r3, #1
 8002410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002414:	400b      	ands	r3, r1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_I2C_Init+0x138>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e59      	subs	r1, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fbb1 f3f3 	udiv	r3, r1, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242e:	e051      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 8002430:	2304      	movs	r3, #4
 8002432:	e04f      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d111      	bne.n	8002460 <HAL_I2C_Init+0x168>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e58      	subs	r0, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e012      	b.n	8002486 <HAL_I2C_Init+0x18e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	0099      	lsls	r1, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x196>
 800248a:	2301      	movs	r3, #1
 800248c:	e022      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <HAL_I2C_Init+0x1bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e58      	subs	r0, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	440b      	add	r3, r1
 80024a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b2:	e00f      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	0099      	lsls	r1, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	6809      	ldr	r1, [r1, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6911      	ldr	r1, [r2, #16]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	000186a0 	.word	0x000186a0
 8002570:	001e847f 	.word	0x001e847f
 8002574:	003d08ff 	.word	0x003d08ff
 8002578:	431bde83 	.word	0x431bde83
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff f8cb 	bl	8001734 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	f040 80d9 	bne.w	8002760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2319      	movs	r3, #25
 80025b4:	2201      	movs	r2, #1
 80025b6:	496d      	ldr	r1, [pc, #436]	; (800276c <HAL_I2C_Mem_Write+0x1ec>)
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f971 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0cc      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Mem_Write+0x56>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0c5      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d007      	beq.n	80025fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2221      	movs	r2, #33	; 0x21
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <HAL_I2C_Mem_Write+0x1f0>)
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800263e:	88f8      	ldrh	r0, [r7, #6]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f890 	bl	8002774 <I2C_RequestMemoryWrite>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d052      	beq.n	8002700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e081      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f9f2 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d11b      	bne.n	8002700 <HAL_I2C_Mem_Write+0x180>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d017      	beq.n	8002700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1aa      	bne.n	800265e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f9de 	bl	8002ace <I2C_WaitOnBTFFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b04      	cmp	r3, #4
 800271e:	d107      	bne.n	8002730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e016      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	00100002 	.word	0x00100002
 8002770:	ffff0000 	.word	0xffff0000

08002774 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	817b      	strh	r3, [r7, #10]
 8002786:	460b      	mov	r3, r1
 8002788:	813b      	strh	r3, [r7, #8]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f878 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c4:	d103      	bne.n	80027ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e05f      	b.n	8002892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	492d      	ldr	r1, [pc, #180]	; (800289c <I2C_RequestMemoryWrite+0x128>)
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f8b0 	bl	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04c      	b.n	8002892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	6a39      	ldr	r1, [r7, #32]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f91a 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00d      	beq.n	800283a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b04      	cmp	r3, #4
 8002824:	d107      	bne.n	8002836 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e02b      	b.n	8002892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002840:	893b      	ldrh	r3, [r7, #8]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	e021      	b.n	8002890 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800284c:	893b      	ldrh	r3, [r7, #8]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29b      	uxth	r3, r3
 8002852:	b2da      	uxtb	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f8f4 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b04      	cmp	r3, #4
 8002870:	d107      	bne.n	8002882 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002880:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e005      	b.n	8002892 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002886:	893b      	ldrh	r3, [r7, #8]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	00010002 	.word	0x00010002

080028a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b0:	e025      	b.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d021      	beq.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe ff3b 	bl	8001734 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e023      	b.n	8002946 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10d      	bne.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	e00c      	b.n	800293e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d0b6      	beq.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800295c:	e051      	b.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d123      	bne.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002986:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0204 	orr.w	r2, r3, #4
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e046      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d021      	beq.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe feb9 	bl	8001734 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e020      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10c      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4013      	ands	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e00b      	b.n	8002a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d18d      	bne.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a58:	e02d      	b.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f878 	bl	8002b50 <I2C_IsAcknowledgeFailed>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e02d      	b.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d021      	beq.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7fe fe5f 	bl	8001734 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d116      	bne.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d1ca      	bne.n	8002a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ada:	e02d      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f837 	bl	8002b50 <I2C_IsAcknowledgeFailed>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e02d      	b.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d021      	beq.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7fe fe1e 	bl	8001734 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e007      	b.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d1ca      	bne.n	8002adc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d11b      	bne.n	8002ba0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e267      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d075      	beq.n	8002cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d112      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d157      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e242      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x98>
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6f      	ldr	r2, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fd64 	bl	8001734 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fd60 	bl	8001734 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e207      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fd50 	bl	8001734 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe fd4c 	bl	8001734 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1f3      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1c7      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4937      	ldr	r1, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fd05 	bl	8001734 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fd01 	bl	8001734 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1a8      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4925      	ldr	r1, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fce4 	bl	8001734 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fe fce0 	bl	8001734 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e187      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe fcc4 	bl	8001734 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe fcc0 	bl	8001734 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e167      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x200>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fcad 	bl	8001734 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00e      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fe fca9 	bl	8001734 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d907      	bls.n	8002dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e150      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ea      	bne.n	8002dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b77      	ldr	r3, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b74      	ldr	r3, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a73      	ldr	r2, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fc69 	bl	8001734 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe fc65 	bl	8001734 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e10c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ea>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x30c>
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fc2a 	bl	8001734 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fc26 	bl	8001734 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0cb      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x334>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fe fc14 	bl	8001734 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe fc10 	bl	8001734 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b5      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a38      	ldr	r2, [pc, #224]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a1 	beq.w	8003090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d05c      	beq.n	8003014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d141      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fbe4 	bl	8001734 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fbe0 	bl	8001734 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e087      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fbb9 	bl	8001734 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fbb5 	bl	8001734 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e05c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x416>
 8002fe4:	e054      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fba2 	bl	8001734 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fb9e 	bl	8001734 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e045      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x444>
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e038      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
 8003028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d028      	beq.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d121      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe fad0 	bl	8001734 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe facc 	bl	8001734 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fa30 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	080066a8 	.word	0x080066a8
 8003264:	20000010 	.word	0x20000010
 8003268:	20000014 	.word	0x20000014

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b090      	sub	sp, #64	; 0x40
 8003272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	2300      	movs	r3, #0
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327c:	2300      	movs	r3, #0
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 8003290:	2b08      	cmp	r3, #8
 8003292:	f200 80a1 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x34>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800329e:	e09b      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80032a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032a4:	e09b      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a6:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032aa:	e098      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b6:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	627a      	str	r2, [r7, #36]	; 0x24
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032d4:	2100      	movs	r1, #0
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d8:	fb03 f201 	mul.w	r2, r3, r1
 80032dc:	2300      	movs	r3, #0
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	4a43      	ldr	r2, [pc, #268]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e6:	fba0 1202 	umull	r1, r2, r0, r2
 80032ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ec:	460a      	mov	r2, r1
 80032ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80032f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f2:	4413      	add	r3, r2
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	2200      	movs	r2, #0
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	61fa      	str	r2, [r7, #28]
 80032fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003306:	f7fc ff67 	bl	80001d8 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4613      	mov	r3, r2
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003312:	e053      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	2200      	movs	r2, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	617a      	str	r2, [r7, #20]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003326:	f04f 0b00 	mov.w	fp, #0
 800332a:	4652      	mov	r2, sl
 800332c:	465b      	mov	r3, fp
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333c:	0150      	lsls	r0, r2, #5
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	ebb2 080a 	subs.w	r8, r2, sl
 8003346:	eb63 090b 	sbc.w	r9, r3, fp
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003356:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800335a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800335e:	ebb2 0408 	subs.w	r4, r2, r8
 8003362:	eb63 0509 	sbc.w	r5, r3, r9
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	00eb      	lsls	r3, r5, #3
 8003370:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003374:	00e2      	lsls	r2, r4, #3
 8003376:	4614      	mov	r4, r2
 8003378:	461d      	mov	r5, r3
 800337a:	eb14 030a 	adds.w	r3, r4, sl
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	eb45 030b 	adc.w	r3, r5, fp
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003392:	4629      	mov	r1, r5
 8003394:	028b      	lsls	r3, r1, #10
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800339c:	4621      	mov	r1, r4
 800339e:	028a      	lsls	r2, r1, #10
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	2200      	movs	r2, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	60fa      	str	r2, [r7, #12]
 80033ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b0:	f7fc ff12 	bl	80001d8 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3740      	adds	r7, #64	; 0x40
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	017d7840 	.word	0x017d7840

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_RCC_GetHCLKFreq+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000010 	.word	0x20000010

08003410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003414:	f7ff fff0 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a9b      	lsrs	r3, r3, #10
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	080066b8 	.word	0x080066b8

08003438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800343c:	f7ff ffdc 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0b5b      	lsrs	r3, r3, #13
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK2Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	080066b8 	.word	0x080066b8

08003460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e041      	b.n	80034f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd ffa8 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f000 fac0 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e041      	b.n	8003594 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f839 	bl	800359c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 fa71 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_TIM_PWM_Start+0x24>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e022      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d109      	bne.n	80035ee <HAL_TIM_PWM_Start+0x3e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	e015      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x58>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e008      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e068      	b.n	80036f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start+0x82>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003630:	e013      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0x92>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003640:	e00b      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0xa2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003650:	e003      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fc84 	bl	8003f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_TIM_PWM_Start+0x14c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d107      	bne.n	8003682 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_TIM_PWM_Start+0x14c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_TIM_PWM_Start+0x10e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d013      	beq.n	80036be <HAL_TIM_PWM_Start+0x10e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_TIM_PWM_Start+0x150>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_TIM_PWM_Start+0x10e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a17      	ldr	r2, [pc, #92]	; (8003704 <HAL_TIM_PWM_Start+0x154>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_TIM_PWM_Start+0x10e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <HAL_TIM_PWM_Start+0x158>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_TIM_PWM_Start+0x10e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <HAL_TIM_PWM_Start+0x15c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d111      	bne.n	80036e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d010      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40014000 	.word	0x40014000

08003710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0ae      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	f200 809f 	bhi.w	800387c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003779 	.word	0x08003779
 8003748:	0800387d 	.word	0x0800387d
 800374c:	0800387d 	.word	0x0800387d
 8003750:	0800387d 	.word	0x0800387d
 8003754:	080037b9 	.word	0x080037b9
 8003758:	0800387d 	.word	0x0800387d
 800375c:	0800387d 	.word	0x0800387d
 8003760:	0800387d 	.word	0x0800387d
 8003764:	080037fb 	.word	0x080037fb
 8003768:	0800387d 	.word	0x0800387d
 800376c:	0800387d 	.word	0x0800387d
 8003770:	0800387d 	.word	0x0800387d
 8003774:	0800383b 	.word	0x0800383b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f9d0 	bl	8003b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0208 	orr.w	r2, r2, #8
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
      break;
 80037b6:	e064      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa16 	bl	8003bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
      break;
 80037f8:	e043      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa61 	bl	8003cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0208 	orr.w	r2, r2, #8
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0204 	bic.w	r2, r2, #4
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
      break;
 8003838:	e023      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 faab 	bl	8003d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	021a      	lsls	r2, r3, #8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
      break;
 800387a:	e002      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_ConfigClockSource+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e0b4      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x186>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e8:	d03e      	beq.n	8003968 <HAL_TIM_ConfigClockSource+0xd4>
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	f200 8087 	bhi.w	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_TIM_ConfigClockSource+0x172>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d87f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d01a      	beq.n	800393a <HAL_TIM_ConfigClockSource+0xa6>
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d87b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d050      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x11a>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d877      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d03c      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xfa>
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d873      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d058      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x13a>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d86f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d064      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d86b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d060      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d867      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05c      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d05a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	e062      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6899      	ldr	r1, [r3, #8]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f000 faf1 	bl	8003f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800395c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	609a      	str	r2, [r3, #8]
      break;
 8003966:	e04f      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6899      	ldr	r1, [r3, #8]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f000 fada 	bl	8003f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398a:	609a      	str	r2, [r3, #8]
      break;
 800398c:	e03c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fa4e 	bl	8003e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2150      	movs	r1, #80	; 0x50
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 faa7 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039ac:	e02c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 fa6d 	bl	8003e9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2160      	movs	r1, #96	; 0x60
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa97 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039cc:	e01c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 fa2e 	bl	8003e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fa87 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f000 fa7e 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <TIM_Base_SetConfig+0xe4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00f      	beq.n	8003a5c <TIM_Base_SetConfig+0x38>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d00b      	beq.n	8003a5c <TIM_Base_SetConfig+0x38>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a31      	ldr	r2, [pc, #196]	; (8003b0c <TIM_Base_SetConfig+0xe8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d007      	beq.n	8003a5c <TIM_Base_SetConfig+0x38>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a30      	ldr	r2, [pc, #192]	; (8003b10 <TIM_Base_SetConfig+0xec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d003      	beq.n	8003a5c <TIM_Base_SetConfig+0x38>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a2f      	ldr	r2, [pc, #188]	; (8003b14 <TIM_Base_SetConfig+0xf0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d108      	bne.n	8003a6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <TIM_Base_SetConfig+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01b      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7c:	d017      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <TIM_Base_SetConfig+0xe8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <TIM_Base_SetConfig+0xec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00f      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a20      	ldr	r2, [pc, #128]	; (8003b14 <TIM_Base_SetConfig+0xf0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <TIM_Base_SetConfig+0xf4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <TIM_Base_SetConfig+0xf8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0x8a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <TIM_Base_SetConfig+0xfc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d108      	bne.n	8003ac0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <TIM_Base_SetConfig+0xe4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0201 	bic.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0303 	bic.w	r3, r3, #3
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 0302 	bic.w	r3, r3, #2
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <TIM_OC1_SetConfig+0xc8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d10c      	bne.n	8003b9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0308 	bic.w	r3, r3, #8
 8003b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a13      	ldr	r2, [pc, #76]	; (8003bec <TIM_OC1_SetConfig+0xc8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d111      	bne.n	8003bc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40010000 	.word	0x40010000

08003bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0320 	bic.w	r3, r3, #32
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <TIM_OC2_SetConfig+0xd4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10d      	bne.n	8003c6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <TIM_OC2_SetConfig+0xd4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d113      	bne.n	8003c9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000

08003cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <TIM_OC3_SetConfig+0xd0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10d      	bne.n	8003d42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <TIM_OC3_SetConfig+0xd0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d113      	bne.n	8003d72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	621a      	str	r2, [r3, #32]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40010000 	.word	0x40010000

08003d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	031b      	lsls	r3, r3, #12
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <TIM_OC4_SetConfig+0x9c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d109      	bne.n	8003e10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	019b      	lsls	r3, r3, #6
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000

08003e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 030a 	bic.w	r3, r3, #10
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0210 	bic.w	r2, r3, #16
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f043 0307 	orr.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	609a      	str	r2, [r3, #8]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e050      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d013      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40014000 	.word	0x40014000

08004098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e03d      	b.n	8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e03f      	b.n	80041ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd f9c8 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800417e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f829 	bl	80041d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b0c0      	sub	sp, #256	; 0x100
 80041de:	af00      	add	r7, sp, #0
 80041e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	68d9      	ldr	r1, [r3, #12]
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	ea40 0301 	orr.w	r3, r0, r1
 8004200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	431a      	orrs	r2, r3
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	431a      	orrs	r2, r3
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004230:	f021 010c 	bic.w	r1, r1, #12
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800423e:	430b      	orrs	r3, r1
 8004240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	6999      	ldr	r1, [r3, #24]
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	ea40 0301 	orr.w	r3, r0, r1
 800425e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b8f      	ldr	r3, [pc, #572]	; (80044a4 <UART_SetConfig+0x2cc>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d005      	beq.n	8004278 <UART_SetConfig+0xa0>
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b8d      	ldr	r3, [pc, #564]	; (80044a8 <UART_SetConfig+0x2d0>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d104      	bne.n	8004282 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004278:	f7ff f8de 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 800427c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004280:	e003      	b.n	800428a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004282:	f7ff f8c5 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004286:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004294:	f040 810c 	bne.w	80044b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	1891      	adds	r1, r2, r2
 80042b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80042b2:	415b      	adcs	r3, r3
 80042b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ba:	4621      	mov	r1, r4
 80042bc:	eb12 0801 	adds.w	r8, r2, r1
 80042c0:	4629      	mov	r1, r5
 80042c2:	eb43 0901 	adc.w	r9, r3, r1
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042da:	4690      	mov	r8, r2
 80042dc:	4699      	mov	r9, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	eb18 0303 	adds.w	r3, r8, r3
 80042e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e8:	462b      	mov	r3, r5
 80042ea:	eb49 0303 	adc.w	r3, r9, r3
 80042ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004306:	460b      	mov	r3, r1
 8004308:	18db      	adds	r3, r3, r3
 800430a:	653b      	str	r3, [r7, #80]	; 0x50
 800430c:	4613      	mov	r3, r2
 800430e:	eb42 0303 	adc.w	r3, r2, r3
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
 8004314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800431c:	f7fb ff5c 	bl	80001d8 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4b61      	ldr	r3, [pc, #388]	; (80044ac <UART_SetConfig+0x2d4>)
 8004326:	fba3 2302 	umull	r2, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	011c      	lsls	r4, r3, #4
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004338:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800433c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	64b9      	str	r1, [r7, #72]	; 0x48
 8004348:	415b      	adcs	r3, r3
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004350:	4641      	mov	r1, r8
 8004352:	eb12 0a01 	adds.w	sl, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb43 0b01 	adc.w	fp, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800436c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004370:	4692      	mov	sl, r2
 8004372:	469b      	mov	fp, r3
 8004374:	4643      	mov	r3, r8
 8004376:	eb1a 0303 	adds.w	r3, sl, r3
 800437a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800437e:	464b      	mov	r3, r9
 8004380:	eb4b 0303 	adc.w	r3, fp, r3
 8004384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004394:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800439c:	460b      	mov	r3, r1
 800439e:	18db      	adds	r3, r3, r3
 80043a0:	643b      	str	r3, [r7, #64]	; 0x40
 80043a2:	4613      	mov	r3, r2
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
 80043aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043b2:	f7fb ff11 	bl	80001d8 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <UART_SetConfig+0x2d4>)
 80043be:	fba3 2301 	umull	r2, r3, r3, r1
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2264      	movs	r2, #100	; 0x64
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	1acb      	subs	r3, r1, r3
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <UART_SetConfig+0x2d4>)
 80043d4:	fba3 2302 	umull	r2, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e0:	441c      	add	r4, r3
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80043fc:	415b      	adcs	r3, r3
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004404:	4641      	mov	r1, r8
 8004406:	1851      	adds	r1, r2, r1
 8004408:	6339      	str	r1, [r7, #48]	; 0x30
 800440a:	4649      	mov	r1, r9
 800440c:	414b      	adcs	r3, r1
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800441c:	4659      	mov	r1, fp
 800441e:	00cb      	lsls	r3, r1, #3
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004426:	4651      	mov	r1, sl
 8004428:	00ca      	lsls	r2, r1, #3
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	4603      	mov	r3, r0
 8004430:	4642      	mov	r2, r8
 8004432:	189b      	adds	r3, r3, r2
 8004434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004438:	464b      	mov	r3, r9
 800443a:	460a      	mov	r2, r1
 800443c:	eb42 0303 	adc.w	r3, r2, r3
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004450:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004458:	460b      	mov	r3, r1
 800445a:	18db      	adds	r3, r3, r3
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
 800445e:	4613      	mov	r3, r2
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800446a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800446e:	f7fb feb3 	bl	80001d8 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <UART_SetConfig+0x2d4>)
 8004478:	fba3 1302 	umull	r1, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	2164      	movs	r1, #100	; 0x64
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	3332      	adds	r3, #50	; 0x32
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <UART_SetConfig+0x2d4>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f003 0207 	and.w	r2, r3, #7
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4422      	add	r2, r4
 800449e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044a0:	e106      	b.n	80046b0 <UART_SetConfig+0x4d8>
 80044a2:	bf00      	nop
 80044a4:	40011000 	.word	0x40011000
 80044a8:	40011400 	.word	0x40011400
 80044ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044c2:	4642      	mov	r2, r8
 80044c4:	464b      	mov	r3, r9
 80044c6:	1891      	adds	r1, r2, r2
 80044c8:	6239      	str	r1, [r7, #32]
 80044ca:	415b      	adcs	r3, r3
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d2:	4641      	mov	r1, r8
 80044d4:	1854      	adds	r4, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb43 0501 	adc.w	r5, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044f8:	464b      	mov	r3, r9
 80044fa:	eb45 0303 	adc.w	r3, r5, r3
 80044fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800450e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800451e:	4629      	mov	r1, r5
 8004520:	008b      	lsls	r3, r1, #2
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004528:	4621      	mov	r1, r4
 800452a:	008a      	lsls	r2, r1, #2
 800452c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004530:	f7fb fe52 	bl	80001d8 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4b60      	ldr	r3, [pc, #384]	; (80046bc <UART_SetConfig+0x4e4>)
 800453a:	fba3 2302 	umull	r2, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	011c      	lsls	r4, r3, #4
 8004542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800454c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004550:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	61b9      	str	r1, [r7, #24]
 800455c:	415b      	adcs	r3, r3
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6139      	str	r1, [r7, #16]
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045bc:	4649      	mov	r1, r9
 80045be:	008b      	lsls	r3, r1, #2
 80045c0:	4641      	mov	r1, r8
 80045c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c6:	4641      	mov	r1, r8
 80045c8:	008a      	lsls	r2, r1, #2
 80045ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ce:	f7fb fe03 	bl	80001d8 <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	4b38      	ldr	r3, [pc, #224]	; (80046bc <UART_SetConfig+0x4e4>)
 80045da:	fba3 2301 	umull	r2, r3, r3, r1
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2264      	movs	r2, #100	; 0x64
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	1acb      	subs	r3, r1, r3
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	3332      	adds	r3, #50	; 0x32
 80045ec:	4a33      	ldr	r2, [pc, #204]	; (80046bc <UART_SetConfig+0x4e4>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f8:	441c      	add	r4, r3
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	673b      	str	r3, [r7, #112]	; 0x70
 8004602:	677a      	str	r2, [r7, #116]	; 0x74
 8004604:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	415b      	adcs	r3, r3
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004618:	4641      	mov	r1, r8
 800461a:	1851      	adds	r1, r2, r1
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	4649      	mov	r1, r9
 8004620:	414b      	adcs	r3, r1
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004630:	4659      	mov	r1, fp
 8004632:	00cb      	lsls	r3, r1, #3
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463a:	4651      	mov	r1, sl
 800463c:	00ca      	lsls	r2, r1, #3
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	4603      	mov	r3, r0
 8004644:	4642      	mov	r2, r8
 8004646:	189b      	adds	r3, r3, r2
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
 800464a:	464b      	mov	r3, r9
 800464c:	460a      	mov	r2, r1
 800464e:	eb42 0303 	adc.w	r3, r2, r3
 8004652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	663b      	str	r3, [r7, #96]	; 0x60
 800465e:	667a      	str	r2, [r7, #100]	; 0x64
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800466c:	4649      	mov	r1, r9
 800466e:	008b      	lsls	r3, r1, #2
 8004670:	4641      	mov	r1, r8
 8004672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004676:	4641      	mov	r1, r8
 8004678:	008a      	lsls	r2, r1, #2
 800467a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800467e:	f7fb fdab 	bl	80001d8 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <UART_SetConfig+0x4e4>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	; 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <UART_SetConfig+0x4e4>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 020f 	and.w	r2, r3, #15
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4422      	add	r2, r4
 80046ae:	609a      	str	r2, [r3, #8]
}
 80046b0:	bf00      	nop
 80046b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046b6:	46bd      	mov	sp, r7
 80046b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046bc:	51eb851f 	.word	0x51eb851f

080046c0 <memset>:
 80046c0:	4402      	add	r2, r0
 80046c2:	4603      	mov	r3, r0
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d100      	bne.n	80046ca <memset+0xa>
 80046c8:	4770      	bx	lr
 80046ca:	f803 1b01 	strb.w	r1, [r3], #1
 80046ce:	e7f9      	b.n	80046c4 <memset+0x4>

080046d0 <__libc_init_array>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	4d0d      	ldr	r5, [pc, #52]	; (8004708 <__libc_init_array+0x38>)
 80046d4:	4c0d      	ldr	r4, [pc, #52]	; (800470c <__libc_init_array+0x3c>)
 80046d6:	1b64      	subs	r4, r4, r5
 80046d8:	10a4      	asrs	r4, r4, #2
 80046da:	2600      	movs	r6, #0
 80046dc:	42a6      	cmp	r6, r4
 80046de:	d109      	bne.n	80046f4 <__libc_init_array+0x24>
 80046e0:	4d0b      	ldr	r5, [pc, #44]	; (8004710 <__libc_init_array+0x40>)
 80046e2:	4c0c      	ldr	r4, [pc, #48]	; (8004714 <__libc_init_array+0x44>)
 80046e4:	f000 f818 	bl	8004718 <_init>
 80046e8:	1b64      	subs	r4, r4, r5
 80046ea:	10a4      	asrs	r4, r4, #2
 80046ec:	2600      	movs	r6, #0
 80046ee:	42a6      	cmp	r6, r4
 80046f0:	d105      	bne.n	80046fe <__libc_init_array+0x2e>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f8:	4798      	blx	r3
 80046fa:	3601      	adds	r6, #1
 80046fc:	e7ee      	b.n	80046dc <__libc_init_array+0xc>
 80046fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004702:	4798      	blx	r3
 8004704:	3601      	adds	r6, #1
 8004706:	e7f2      	b.n	80046ee <__libc_init_array+0x1e>
 8004708:	080066d0 	.word	0x080066d0
 800470c:	080066d0 	.word	0x080066d0
 8004710:	080066d0 	.word	0x080066d0
 8004714:	080066d4 	.word	0x080066d4

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
